// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: usecase_query.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getBacklogItems = `-- name: GetBacklogItems :many
SELECT bi.id, type, bi.summary, bi.story_point, st.id, st.summary, st.story_point, backlog_item_id
FROM backlog_items bi
         LEFT JOIN sub_tasks st
                   ON st.backlog_item_id = bi.id LIMIT 100
`

type GetBacklogItemsRow struct {
	ID            uuid.UUID
	Type          BacklogType
	Summary       string
	StoryPoint    sql.NullInt32
	ID_2          uuid.NullUUID
	Summary_2     sql.NullString
	StoryPoint_2  sql.NullInt32
	BacklogItemID uuid.NullUUID
}

func (q *Queries) GetBacklogItems(ctx context.Context) ([]GetBacklogItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBacklogItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBacklogItemsRow
	for rows.Next() {
		var i GetBacklogItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Summary,
			&i.StoryPoint,
			&i.ID_2,
			&i.Summary_2,
			&i.StoryPoint_2,
			&i.BacklogItemID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
