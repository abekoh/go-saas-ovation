// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type BacklogType string

const (
	BacklogTypeSTORY BacklogType = "STORY"
	BacklogTypeBUG   BacklogType = "BUG"
)

func (e *BacklogType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BacklogType(s)
	case string:
		*e = BacklogType(s)
	default:
		return fmt.Errorf("unsupported scan type for BacklogType: %T", src)
	}
	return nil
}

type NullBacklogType struct {
	BacklogType BacklogType
	Valid       bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBacklogType) Scan(value interface{}) error {
	if value == nil {
		ns.BacklogType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BacklogType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBacklogType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.BacklogType, nil
}

type BacklogItem struct {
	ID         uuid.UUID
	Type       BacklogType
	Summary    string
	StoryPoint sql.NullInt32
}

type SubTask struct {
	ID            uuid.UUID
	Summary       string
	StoryPoint    sql.NullInt32
	BacklogItemID uuid.UUID
}
